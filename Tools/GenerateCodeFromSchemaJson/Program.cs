
using System.Data;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Text;
using System.Reflection;
using System.Text.Json;

namespace GenerateCodeFromSchemaJson
{
    public class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("Starting...");

            var camelizer = new Regex("[^a-zA-Z0-9._]");

            var schema = HelperMethods.GetColumnInfo();
            Console.WriteLine($"Found {schema.Count} columns to reconstruct...");

            var projectDirectory = new DirectoryInfo(Directory.GetCurrentDirectory());
            while (true)
            {
                if (projectDirectory is null)
                {
                    Console.WriteLine($"ERROR: Failed to find project folder! Exiting...");
                    return;
                }
                if ("gizmofort.connector.erpnext" == projectDirectory.Name)
                    break;
                projectDirectory = projectDirectory.Parent;
            }
            var outputFolder = Path.Combine(projectDirectory.FullName, @"Libs\GizmoFort.Connector.ERPNext\ERPTypes");
            var unitTestOutputFolder = Path.Combine(projectDirectory.FullName, @"Tests\GizmoFort.Connector.ERPNext.Tests\TestData");
            Console.WriteLine($"Exporting generated code to {outputFolder}...");
            if (!Directory.Exists(outputFolder))
                Directory.CreateDirectory(outputFolder);

            var banner =
@"/********************************************************************
    This file has been auto-generated by GenerateCodeFromSchemaJson
    created date: " + DateTime.Now.ToString("G") + @"
********************************************************************/";

            var docTypesLines = new StringBuilder();
            var servicesUsings = new StringBuilder();
            var servicesProperties = new StringBuilder();
            var servicesConstructor = new StringBuilder();

            var modules = schema
                            .GroupBy(c => c.module)
                            .Select(g => g.Key)
                            .ToList();
            foreach (var module in modules)
            {
                var camelizedModule = camelizer.Replace($"{module}", "");

                var moduleFolder = Path.Combine(outputFolder, camelizedModule);
                if (!Directory.Exists(moduleFolder))
                    Directory.CreateDirectory(moduleFolder);

                var doctypes = schema
                                 .Where(c => c.module == module)
                                 .GroupBy(c => c.doctype)
                                 .Select(g => g.Key)
                                 .ToList();
                foreach (var doctype in doctypes)
                {
                    var camelizedDoctype = camelizer.Replace($"{doctype}", "");

                    Console.WriteLine($"Processing doctype '{camelizedModule}.{camelizedDoctype}'...");

                    var doctypeFolder = Path.Combine(outputFolder, camelizedModule, camelizedDoctype);
                    if (!Directory.Exists(doctypeFolder))
                        Directory.CreateDirectory(doctypeFolder);

                    var columnInfos = schema
                                        .Where(c => c.module == module
                                                    && c.doctype == doctype)
                                        .ToList();

                    var camelizedModuleNamespace = HelperMethods.KeywordFixup(camelizedModule, "_");
                    var camelizedDoctypeNamespace = HelperMethods.KeywordFixup(camelizedDoctype, "_");

                    var @namespace = $"GizmoFort.Connector.ERPNext.ERPTypes.{camelizedModuleNamespace}.{camelizedDoctypeNamespace}";
                    var typePrefix = $"ERP_{camelizedModule}_{camelizedDoctype}";
                    var doctypeEnumValue = $"{camelizedModule}_{camelizedDoctype}";
                    var modelClassName = $"ERP_{camelizedModule}_{camelizedDoctype}";
                    var serviceClassName = $"{camelizedModule}_{camelizedDoctype}_Service";

                    bool forceRegenerateAllFiles = false;

                    //
                    // user-customizable model file
                    //
                    {
                        var columnInfo = columnInfos
                                                .Where(c => c.column_name == "name")
                                                .First();
                        var nameCSharpType = HelperMethods.GetCSharpTypeFromColumnInfo(columnInfo);

                        var fileContents =
@"" + banner + @"

using GizmoFort.Connector.ERPNext.WrapperTypes;

namespace " + @namespace + @"
{
    /*** NOTE: This file can be modified and will not be re-generated unless deleted ***/

    public partial class " + modelClassName + @" : ERPNextObjectBase
    {
        public static " + modelClassName + @" CreateNew(" + nameCSharpType + @" name /* add other parameters as needed */ )
        {
            " + modelClassName + @" obj = new()
            {
                Name = name
                /* set other properties from parameters here */
            };
            return obj;
        }
    }
}
";
                        var sb = new StringBuilder();

                        sb.Append(fileContents);

                        // create file if it doesn't exist
                        var filename = $"ERP_{camelizedModule}_{camelizedDoctype}.cs";
                        var outputFileFullPath = $"{doctypeFolder}\\{filename}";
                        if (forceRegenerateAllFiles || !File.Exists(outputFileFullPath))
                        {
                            if (File.Exists(outputFileFullPath))
                                File.Delete(outputFileFullPath);
                            using var file = new StreamWriter(outputFileFullPath);
                            file.WriteLine(sb.ToString()); // "sb" is the StringBuilder
                        }
                    }

                    //
                    // auto-generated model file
                    //
                    {
                        var propertiesBuilder = new StringBuilder();
                        foreach (var columnInfo in columnInfos)
                        {
                            var isNullable = columnInfo.is_nullable == "YES";
                            var columnType = columnInfo.column_type;
                            var cSharpType = HelperMethods.GetCSharpTypeFromColumnInfo(columnInfo);
                            var columnName = columnInfo.column_name;
                            var hasLeadingUnderscore = columnName[..1] == "_";
                            var optionalUnderscore = hasLeadingUnderscore ? "_" : string.Empty;
                            var columnNamePascalCase = HelperMethods.ConvertColumnNameToPascalCase(columnName);
                            var propertyName = $"{optionalUnderscore}{columnNamePascalCase}";
                            var safeColumnName = HelperMethods.KeywordFixup(columnName, "@");
                            propertiesBuilder.AppendLine();
                            propertiesBuilder.AppendLine($"        [ColumnInfo(\"{safeColumnName}\", \"{columnType}\", isNullable: {isNullable.ToString().ToLower()})]");

                            switch (columnName)
                            {
                                case "docstatus":
                                    propertiesBuilder.AppendLine($"        public Docstatus {propertyName}");
                                    propertiesBuilder.AppendLine($"        {{");
                                    propertiesBuilder.AppendLine($"            get {{ return (Docstatus)data.{safeColumnName}; }}");
                                    propertiesBuilder.AppendLine($"            set {{ data.{safeColumnName} = (int)value; }}");
                                    propertiesBuilder.AppendLine($"        }}");
                                    break;

                                default:
                                    if (hasLeadingUnderscore)
                                        propertiesBuilder.AppendLine("#pragma warning disable IDE1006 // Naming Styles");
                                    propertiesBuilder.AppendLine($"        public {cSharpType} {propertyName}");
                                    if (hasLeadingUnderscore)
                                        propertiesBuilder.AppendLine("#pragma warning restore IDE1006 // Naming Styles");
                                    propertiesBuilder.AppendLine($"        {{");
                                    var getterFunction = HelperMethods.GetGetterFuncFromColumnInfo(columnInfo).Replace("*", $"data.{safeColumnName}");
                                    propertiesBuilder.AppendLine($"            get {{ return {getterFunction}; }}");
                                    var setterFunction = HelperMethods.GetSetterFuncFromColumnInfo(columnInfo).Replace("*", "value");
                                    propertiesBuilder.AppendLine($"            set {{ data.{safeColumnName} = {setterFunction}; }}");
                                    propertiesBuilder.AppendLine($"        }}");
                                    break;
                            }

                        }
                        var properties = propertiesBuilder.ToString();


                        var fileContents =
@"" + banner + @"

using System;
using GizmoFort.Connector.ERPNext.PublicTypes;
using GizmoFort.Connector.ERPNext.WrapperTypes;
using GizmoFort.Connector.ERPNext.DataAnnotations;
using GizmoFort.Connector.ERPNext.Serialization;
using _DocType = GizmoFort.Connector.ERPNext.PublicTypes.DocType;

namespace " + @namespace + @"
{
    public partial class " + modelClassName + @" : ERPNextObjectBase
    {
        public " + modelClassName + @"() : this(new ERPObject(_DocType." + doctypeEnumValue + @")) { }
        public " + modelClassName + @"(ERPObject obj) : base(obj) { }
" + properties + @"

    }
}
";
                        var sb = new StringBuilder();

                        sb.Append(fileContents);

                        // create file
                        var filename = $"ERP_{camelizedModule}_{camelizedDoctype}.partial.cs";
                        var outputFileFullPath = $"{doctypeFolder}\\{filename}";
                        if (File.Exists(outputFileFullPath))
                            File.Delete(outputFileFullPath);
                        using var file = new StreamWriter(outputFileFullPath);
                        file.WriteLine(sb.ToString()); // "sb" is the StringBuilder
                    }

                    //
                    // user-customizable service file
                    //
                    {

                        var modelContent =
@"" + banner + @"

using GizmoFort.Connector.ERPNext.PublicInterfaces;
using GizmoFort.Connector.ERPNext.PublicInterfaces.SubServices;
using GizmoFort.Connector.ERPNext.PublicTypes;
using _DocType = GizmoFort.Connector.ERPNext.PublicTypes.DocType;

namespace " + @namespace + @"
{
    public class " + serviceClassName + @" : SubServiceBase<" + modelClassName + @">
    {
        public " + serviceClassName + @"(ERPNextClient client) : base(_DocType." + doctypeEnumValue + @", client) { }

        protected override " + modelClassName + @" FromERPObject(ERPObject obj)
        {
            return new " + modelClassName + @"(obj);
        }

        /* custom functions can be added here */

    }
}
";
                        var sb = new StringBuilder();

                        sb.Append(modelContent);

                        // create file if it doesn't exist
                        var filename = $"{camelizedModule}_{camelizedDoctype}_Service.cs";
                        var outputFileFullPath = $"{doctypeFolder}\\{filename}";
                        if (forceRegenerateAllFiles || !File.Exists(outputFileFullPath))
                        {
                            if (File.Exists(outputFileFullPath))
                                File.Delete(outputFileFullPath);
                            using var file = new StreamWriter(outputFileFullPath);
                            file.WriteLine(sb.ToString()); // "sb" is the StringBuilder
                        }
                    }

                    //
                    // doctypes lines
                    //
                    {
                        docTypesLines.AppendLine($"        public static readonly DocType {doctypeEnumValue} = new(\"{doctype}\");");
                    }

                    //
                    // services lines
                    //
                    if (serviceClassName != "UnitTestingOnly_TestType_Service")
                    {
                        servicesUsings.AppendLine($"using {@namespace};");
                        servicesProperties.AppendLine($"        public {serviceClassName} {serviceClassName} {{ get; }}");
                        servicesConstructor.AppendLine($"            this.{serviceClassName} = new {serviceClassName}(Client);");
                    }


                }


            }

            //
            // replace doctypes in:
            // gizmofort.connector.erpnext\Libs\GizmoFort.Connector.ERPNext\PublicTypes\DocType.cs
            //
            {
                Console.WriteLine(@"Replace old doctypes from GizmoFort.Connector.ERPNext\PublicTypes\DocType.cs...");
                var docTypeCsFile = Path.Combine(projectDirectory.FullName, @"Libs\GizmoFort.Connector.ERPNext\PublicTypes\DocType.cs");
                var docTypeCsFileTemp = $"{docTypeCsFile}temp";
                var lines = File.ReadAllLines(docTypeCsFile);
                using StreamWriter output = new(docTypeCsFileTemp);
                bool newLinesInserted = false;
                foreach (var line in lines)
                {
                    if (!line.Contains("public static readonly DocType"))
                    {
                        output.WriteLine(line);
                    }
                    else if (!newLinesInserted)
                    {
                        output.Write(docTypesLines.ToString());
                        newLinesInserted = true;
                    }
                }
                output.Flush();
                output.Close();
                File.Move(docTypeCsFileTemp, docTypeCsFile, true);
            }

            //
            // replace main servies file in:
            // GizmoFort.Connector.ERPNext\PublicInterfaces\ERPNextServices.cs
            //
            {
                Console.WriteLine(@"Replace main servies file at GizmoFort.Connector.ERPNext\PublicInterfaces\ERPNextServices.cs...");

                var fileContents =
@"" + banner + @"

" + servicesUsings.ToString() + @"
using GizmoFort.Connector.ERPNext.PublicInterfaces.SubServices;

namespace GizmoFort.Connector.ERPNext.PublicInterfaces
{
    public class ERPNextServices
    {
        public ERPNextClient Client { get; }
" + servicesProperties.ToString() + @"

        public ERPNextServices(string domain, string username, string password)
        {
            this.Client = new ERPNextClient(domain, username, password);
" + servicesConstructor.ToString() + @"

        }
    }
}
";
                var sb = new StringBuilder();

                sb.Append(fileContents);

                // create file
                var servicesFileFullPath = Path.Combine(projectDirectory.FullName, @"Libs\GizmoFort.Connector.ERPNext\PublicInterfaces\ERPNextServices.cs");
                if (File.Exists(servicesFileFullPath))
                    File.Delete(servicesFileFullPath);
                using var file = new StreamWriter(servicesFileFullPath);
                file.WriteLine(sb.ToString()); // "sb" is the StringBuilder
            }

            //
            // move unit test data to correct location
            //
            {
                var sourceFolder = Path.Combine(outputFolder, "UnitTestingOnly");
                var destFolder = Path.Combine(unitTestOutputFolder, "UnitTestingOnly");

                if (Directory.Exists(destFolder))
                    Directory.Delete(destFolder, recursive: true);

                Directory.Move(sourceFolder,destFolder);

                //
                // only need the partial
                //
                var testTypeFolder = Path.Combine(destFolder, "TestType");
                foreach (var filePath in Directory.GetFiles(testTypeFolder))
                {
                    var fileInfo = new FileInfo(filePath);
                    if (fileInfo.Name.EndsWith(".partial.cs"))
                    {
                        var fileDestPath = Path.Combine(unitTestOutputFolder, fileInfo.Name);
                        if (File.Exists(fileDestPath))
                            File.Delete(fileDestPath);
                        File.Move(filePath, fileDestPath);
                    }
                }
                Directory.Delete(destFolder, recursive: true);

            }

            Console.WriteLine("Done!");

        }
    }
}
